#include "ast.h"
#include <memory>
#include <deque>

#ifndef OMEGA_WRAPGEN_WRAPPER_GEN_H
#define OMEGA_WRAPGEN_WRAPPER_GEN_H

#define COMMENT_HEADER "WARNING.. This file was generated by omega-wrapgen. DO NOT EDIT!"
#define HEADER_INSERT_TEMPLATE "#include \"@{0}\""

namespace OmegaWrapGen {

    struct GenContext {
        OmegaCommon::String name;
        OmegaCommon::StrRef output_dir;
    };

    struct CGenSettings {
        typedef enum : int {
            Retain,
            CamelCase,
            Kebab
        } NameCase;
        NameCase nameCase;
//        OmegaCommon::StrRef headerName;
    };

    struct PythonGenSettings {
        bool submoduleForCXXNamespace;
    };


    class Gen : public TreeConsumer {
        friend class Parser;
    public:
        inline std::string generateCXXName(OmegaCommon::StrRef declName, TreeScope *scope){
            std::ostringstream out;
            std::deque<OmegaCommon::StrRef> scopes;
            TreeScope *parent;
            if(scope != GLOBAL_SCOPE){
                while((parent = scope->parentScope) != GLOBAL_SCOPE){
                    scopes.push_front(parent->name);
                    scope = parent;
                }

                for(auto & s : scopes){
                    out << s << "::";
                }
            }
            out << declName;
            return out.str();
        };
        using TreeConsumer::consumeDecl;
        virtual void setContext(GenContext & ctxt) = 0;
        virtual GenContext & getContext() = 0;
        virtual void finish() = 0;

        static Gen *CreateCGen(CGenSettings & settings);
        static Gen *CreatePythonGen(PythonGenSettings & settings);
    };



};

#endif